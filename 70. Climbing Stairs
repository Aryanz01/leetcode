class Solution {
    public int climbStairs(int n) {
        // if(n==0){
        //     return 0;
        // }
        // if(n==1){
        //     return 1;
        // }
        // if(n==2){
        //     return 2;
        // }

        // if(n<=2){
        //     return n;
        // }
        // int[] dp = new int[n+1]; 
        // Arrays.fill(dp , -1);

        // if(dp[n] != -1) return dp[n];

        // int left = climbStairs(n-1);
        // int right = climbStairs(n-2);

        // dp[n]= left + right;
        // dp[n]= climbStairs(n-1) + climbStairs(n-2);
        // return dp[n];

        int[] dp = new int[n+1];
        //Arrays.fill(dp , -1);

    if(n<=2){
            return dp[n]=n;        //dp[0]=0 , dp[1]=1 , dp[2]=2
        }
        

        dp[0]=0;
        dp[1]=1;
        dp[2]=2;

        



        for(int i=3 ; i<=n ; i++){
            dp[i]= dp[i-1] + dp[i-2];
        }

        return dp[n];


        
    }
}
