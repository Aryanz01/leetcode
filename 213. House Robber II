https://leetcode.com/problems/house-robber-ii/



// class Solution {
//     public int rob(int[] nums) {
//         int n = nums.length;
//         int[] dp = new int[n];
//         Arrays.fill(dp, -1);

//         return maxi(n-1 , nums, dp);
        
//     }

//     int maxi(int index,int[] nums , int[] dp){
//         if(index==0){
//             return nums[index];
//         }

//         if(index<0){
//             return 0;
//         }

//         if(dp[index] != -1){
//             return dp[index];
//         }

//         int pick = nums[index] + maxi(index-2 , nums ,dp);
//         int notpick = 0 + maxi(index-1, nums, dp);

//         return dp[index]= Math.max(pick, notpick);
//     }
// }

//tabulation


// class Solution {
//     public int rob(int[] nums) {
//         int n = nums.length;
//         int[] dp = new int[n];
//         Arrays.fill(dp, -1);

//         dp[0]=nums[0];
//         int neg= 0;
//         int pick=0;
//         int notpick=0;

//         for(int i=1 ; i<n ;i++){
//             pick = nums[i] + 0;
//             if(i>1){
//                 pick = pick + dp[i-2];
//             }
//             notpick = 0 + dp[i-1];

//             dp[i]= Math.max(pick , notpick);
//         }

//         return dp[n-1];
//     }
// }



class Solution {
    public int rob(int[] nums) {
        int n= nums.length;
        if(n==1){
            return nums[0];
        }
        if(n==2){
            return Math.max(nums[0], nums[1]);
        }
        List<Integer> temp1 = new ArrayList<>();
        List<Integer> temp2 = new ArrayList<>();

        

        for(int i=0; i<n; i++){
            if(i != 0){
                temp1.add(nums[i]);
            }
            if(i != n-1){
                temp2.add(nums[i]);
            }
        }

        return Math.max( maxsub(temp1) , maxsub(temp2));



    }

    public int maxsub(List<Integer> nums){
         int n = nums.size();

        int prev = nums.get(0);
        int prev2 = 0;
        int pick=0;
        int notpick=0;
        int curri=0;

        for(int i=1 ; i<n ;i++){
            pick = nums.get(i) + 0;
            if(i>1){
                pick = pick + prev2;
            }
            notpick = 0 + prev;

            curri= Math.max(pick , notpick);

            prev2=prev;
            prev=curri;
        }

        return prev;
    

    }

}

